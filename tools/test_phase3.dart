// Script de test Phase 3 - API PrestaShop r√©elle
// Tests de connexion, authentification et endpoints

import 'package:koutonou/core/api/prestashop_initializer.dart';
import 'package:koutonou/modules/languages/services/language_service.dart';

/// Tests Phase 3 - Int√©gration API r√©elle
class Phase3ApiTests {
  
  static Future<void> main() async {
    print('üß™ PHASE 3 - TESTS API PRESTASHOP R√âELLE');
    print('=' * 50);
    print('');

    // 1. Test d'initialisation
    await _testInitialization();
    print('');

    // 2. Test de configuration
    _testConfiguration();
    print('');

    // 3. Tests des services
    await _testServices();
    print('');

    // 4. Tests complets API
    await _testCompleteApi();
    print('');

    print('‚úÖ Tests Phase 3 termin√©s !');
    print('=' * 50);
  }

  /// Test d'initialisation de l'API
  static Future<void> _testInitialization() async {
    print('üîß TEST INITIALISATION API');
    print('-' * 30);

    try {
      // Test 1: Initialisation de d√©veloppement
      print('Test 1: Initialisation d√©veloppement...');
      final initSuccess = await PrestaShopApiInitializer.initializeForDevelopment(
        validateConnection: false, // Pas de validation pour √©viter les erreurs de r√©seau
      );
      
      if (initSuccess) {
        print('‚úÖ Initialisation d√©veloppement: OK');
      } else {
        print('‚ùå Initialisation d√©veloppement: √âCHEC');
      }

      // Test 2: Validation de configuration
      print('Test 2: Validation configuration...');
      try {
        PrestaShopApiInitializer.showConfigInfo();
        print('‚úÖ Configuration valide');
      } catch (e) {
        print('‚ùå Configuration invalide: $e');
      }

    } catch (e) {
      print('‚ùå Erreur lors de l\'initialisation: $e');
    }
  }

  /// Test de configuration
  static void _testConfiguration() {
    print('‚öôÔ∏è  TEST CONFIGURATION');
    print('-' * 30);

    try {
      PrestaShopApiInitializer.showConfigInfo();
    } catch (e) {
      print('‚ùå Erreur de configuration: $e');
    }
  }

  /// Test des services g√©n√©r√©s
  static Future<void> _testServices() async {
    print('üîÑ TEST SERVICES G√âN√âR√âS');
    print('-' * 30);

    try {
      // Test du service Language mis √† jour
      print('Test 1: Service Language...');
      final languageService = LanguageService();
      
      try {
        final languages = await languageService.getAll();
        print('‚úÖ Service Language fonctionnel: ${languages.length} langues');
        
        if (languages.isNotEmpty) {
          print('   Premier √©l√©ment: ${languages.first.name}');
        }
      } catch (e) {
        print('‚ö†Ô∏è  Service Language (mode simulation): $e');
        // En mode simulation, c'est normal que √ßa √©choue avec l'API r√©elle
      }

    } catch (e) {
      print('‚ùå Erreur dans les tests de services: $e');
    }
  }

  /// Tests complets de l'API
  static Future<void> _testCompleteApi() async {
    print('üåê TESTS COMPLETS API');
    print('-' * 30);

    try {
      // Test de tous les endpoints principaux
      print('Lancement des tests multi-endpoints...');
      final results = await PrestaShopApiInitializer.runApiTests();
      
      print('R√©sultats d√©taill√©s:');
      results.forEach((endpoint, success) {
        final status = success ? '‚úÖ' : '‚ùå';
        print('  $status $endpoint');
      });

    } catch (e) {
      print('‚ùå Erreur lors des tests API: $e');
    }
  }
}

void main() async {
  await Phase3ApiTests.main();
}
