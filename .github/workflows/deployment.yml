name: üöÄ Deployment Pipeline

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to deploy to"
        required: true
        default: "staging"
        type: choice
        options:
          - staging
          - production
      platform:
        description: "Platform to deploy"
        required: true
        default: "web"
        type: choice
        options:
          - web
          - android
          - ios
          - all

env:
  FLUTTER_VERSION: "3.24.0"

jobs:
  # ===============================================
  # üîç Pre-deployment Validation
  # ===============================================
  pre-deployment:
    name: üîç Pre-deployment Validation
    runs-on: ubuntu-latest
    timeout-minutes: 10

    outputs:
      deploy-web: ${{ steps.determine-platforms.outputs.deploy-web }}
      deploy-android: ${{ steps.determine-platforms.outputs.deploy-android }}
      deploy-ios: ${{ steps.determine-platforms.outputs.deploy-ios }}
      environment: ${{ steps.determine-env.outputs.environment }}

    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v4

      - name: üéØ Determine Environment
        id: determine-env
        run: |
          if [ "${{ github.event_name }}" = "release" ]; then
            echo "environment=production" >> $GITHUB_OUTPUT
          else
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
          fi

      - name: üèóÔ∏è Determine Platforms
        id: determine-platforms
        run: |
          PLATFORM="${{ github.event.inputs.platform }}"
          if [ "${{ github.event_name }}" = "release" ]; then
            PLATFORM="all"
          fi

          case $PLATFORM in
            "web"|"all")
              echo "deploy-web=true" >> $GITHUB_OUTPUT
              ;;
            *)
              echo "deploy-web=false" >> $GITHUB_OUTPUT
              ;;
          esac

          case $PLATFORM in
            "android"|"all")
              echo "deploy-android=true" >> $GITHUB_OUTPUT
              ;;
            *)
              echo "deploy-android=false" >> $GITHUB_OUTPUT
              ;;
          esac

          case $PLATFORM in
            "ios"|"all")
              echo "deploy-ios=true" >> $GITHUB_OUTPUT
              ;;
            *)
              echo "deploy-ios=false" >> $GITHUB_OUTPUT
              ;;
          esac

      - name: üìã Deployment Plan
        run: |
          echo "üöÄ **Deployment Plan**" >> $GITHUB_STEP_SUMMARY
          echo "üåç **Environment**: ${{ steps.determine-env.outputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "üåê **Web**: ${{ steps.determine-platforms.outputs.deploy-web }}" >> $GITHUB_STEP_SUMMARY
          echo "ü§ñ **Android**: ${{ steps.determine-platforms.outputs.deploy-android }}" >> $GITHUB_STEP_SUMMARY
          echo "üçé **iOS**: ${{ steps.determine-platforms.outputs.deploy-ios }}" >> $GITHUB_STEP_SUMMARY

  # ===============================================
  # üåê Deploy Web
  # ===============================================
  deploy-web:
    name: üåê Deploy Web
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: pre-deployment
    if: needs.pre-deployment.outputs.deploy-web == 'true'
    environment: ${{ needs.pre-deployment.outputs.environment }}

    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v4

      - name: üê¶ Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: "stable"
          cache: true

      - name: üì¶ Get Dependencies
        run: flutter pub get

      - name: üåê Build Web (Production)
        run: |
          flutter build web --release \
            --web-renderer canvaskit \
            --base-href "/"

      - name: üìÅ Prepare Web Assets
        run: |
          # Add custom headers for PWA
          echo "/*    /index.html   200" > build/web/_redirects

          # Add robots.txt for SEO
          cat > build/web/robots.txt << EOF
          User-agent: *
          Allow: /
          Sitemap: https://koutonou.app/sitemap.xml
          EOF

      - name: üöÄ Deploy to GitHub Pages (Production)
        if: needs.pre-deployment.outputs.environment == 'production'
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: build/web
          cname: koutonou.app

      - name: üöÄ Deploy to Staging (Netlify/Vercel)
        if: needs.pre-deployment.outputs.environment == 'staging'
        run: |
          echo "üöÄ Deploying to staging environment..."
          # Ici vous pouvez int√©grer Netlify, Vercel, Firebase Hosting, etc.
          # Exemple pour Netlify:
          # npx netlify-cli deploy --prod --dir=build/web --auth=${{ secrets.NETLIFY_AUTH_TOKEN }}

      - name: ‚úÖ Web Deployment Success
        run: |
          echo "‚úÖ **Web Deployment Successful**" >> $GITHUB_STEP_SUMMARY
          if [ "${{ needs.pre-deployment.outputs.environment }}" = "production" ]; then
            echo "üîó **URL**: https://koutonou.app" >> $GITHUB_STEP_SUMMARY
          else
            echo "üîó **Staging URL**: https://staging.koutonou.app" >> $GITHUB_STEP_SUMMARY
          fi

  # ===============================================
  # ü§ñ Deploy Android
  # ===============================================
  deploy-android:
    name: ü§ñ Deploy Android
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: pre-deployment
    if: needs.pre-deployment.outputs.deploy-android == 'true'
    environment: ${{ needs.pre-deployment.outputs.environment }}

    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v4

      - name: ‚òï Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: "17"

      - name: üê¶ Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: "stable"
          cache: true

      - name: üì¶ Get Dependencies
        run: flutter pub get

      - name: üîë Setup Android Signing (Production)
        if: needs.pre-deployment.outputs.environment == 'production'
        run: |
          echo "${{ secrets.ANDROID_KEYSTORE }}" | base64 -d > android/app/keystore.jks
          echo "storeFile=keystore.jks" >> android/key.properties
          echo "storePassword=${{ secrets.ANDROID_KEYSTORE_PASSWORD }}" >> android/key.properties
          echo "keyPassword=${{ secrets.ANDROID_KEY_PASSWORD }}" >> android/key.properties
          echo "keyAlias=${{ secrets.ANDROID_KEY_ALIAS }}" >> android/key.properties

      - name: üèóÔ∏è Build Android App Bundle (Production)
        if: needs.pre-deployment.outputs.environment == 'production'
        run: flutter build appbundle --release

      - name: üèóÔ∏è Build Android APK (Staging)
        if: needs.pre-deployment.outputs.environment == 'staging'
        run: flutter build apk --release

      - name: üöÄ Deploy to Google Play (Production)
        if: needs.pre-deployment.outputs.environment == 'production'
        uses: r0adkll/upload-google-play@v1
        with:
          serviceAccountJsonPlainText: ${{ secrets.GOOGLE_PLAY_SERVICE_ACCOUNT }}
          packageName: com.koutonou.app
          releaseFiles: build/app/outputs/bundle/release/app-release.aab
          track: production
          status: completed

      - name: üì§ Upload APK Artifact (Staging)
        if: needs.pre-deployment.outputs.environment == 'staging'
        uses: actions/upload-artifact@v4
        with:
          name: android-apk-staging
          path: build/app/outputs/flutter-apk/app-release.apk

      - name: ‚úÖ Android Deployment Success
        run: |
          echo "‚úÖ **Android Deployment Successful**" >> $GITHUB_STEP_SUMMARY
          if [ "${{ needs.pre-deployment.outputs.environment }}" = "production" ]; then
            echo "üè™ **Google Play**: App Bundle uploaded" >> $GITHUB_STEP_SUMMARY
          else
            echo "üì± **APK**: Available in artifacts" >> $GITHUB_STEP_SUMMARY
          fi

  # ===============================================
  # üçé Deploy iOS
  # ===============================================
  deploy-ios:
    name: üçé Deploy iOS
    runs-on: macos-latest
    timeout-minutes: 45
    needs: pre-deployment
    if: needs.pre-deployment.outputs.deploy-ios == 'true'
    environment: ${{ needs.pre-deployment.outputs.environment }}

    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v4

      - name: üê¶ Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: "stable"
          cache: true

      - name: üì¶ Get Dependencies
        run: flutter pub get

      - name: üçé Setup iOS Dependencies
        run: |
          cd ios
          pod install
          cd ..

      - name: üîë Setup iOS Certificates (Production)
        if: needs.pre-deployment.outputs.environment == 'production'
        run: |
          echo "${{ secrets.IOS_CERTIFICATE }}" | base64 -d > ios_certificate.p12
          echo "${{ secrets.IOS_PROVISIONING_PROFILE }}" | base64 -d > ios_profile.mobileprovision

          # Import certificate
          security create-keychain -p "${{ secrets.IOS_KEYCHAIN_PASSWORD }}" build.keychain
          security import ios_certificate.p12 -P "${{ secrets.IOS_CERTIFICATE_PASSWORD }}" -A -t cert -f pkcs12 -k build.keychain
          security list-keychains -d user -s build.keychain

          # Install provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp ios_profile.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/

      - name: üèóÔ∏è Build iOS (Production)
        if: needs.pre-deployment.outputs.environment == 'production'
        run: flutter build ios --release --no-codesign

      - name: üèóÔ∏è Build iOS (Staging)
        if: needs.pre-deployment.outputs.environment == 'staging'
        run: flutter build ios --release --no-codesign

      - name: üì¶ Archive iOS App (Production)
        if: needs.pre-deployment.outputs.environment == 'production'
        run: |
          xcodebuild -workspace ios/Runner.xcworkspace \
            -scheme Runner \
            -configuration Release \
            -destination generic/platform=iOS \
            -archivePath build/ios/Runner.xcarchive \
            archive

      - name: üöÄ Deploy to App Store (Production)
        if: needs.pre-deployment.outputs.environment == 'production'
        run: |
          xcodebuild -exportArchive \
            -archivePath build/ios/Runner.xcarchive \
            -exportPath build/ios/ipa \
            -exportOptionsPlist ios/ExportOptions.plist
            
          xcrun altool --upload-app \
            --file build/ios/ipa/Runner.ipa \
            --username "${{ secrets.APPSTORE_USERNAME }}" \
            --password "${{ secrets.APPSTORE_PASSWORD }}"

      - name: üì§ Upload iOS Build (Staging)
        if: needs.pre-deployment.outputs.environment == 'staging'
        uses: actions/upload-artifact@v4
        with:
          name: ios-build-staging
          path: build/ios/iphoneos/Runner.app

      - name: ‚úÖ iOS Deployment Success
        run: |
          echo "‚úÖ **iOS Deployment Successful**" >> $GITHUB_STEP_SUMMARY
          if [ "${{ needs.pre-deployment.outputs.environment }}" = "production" ]; then
            echo "üè™ **App Store**: Build uploaded for review" >> $GITHUB_STEP_SUMMARY
          else
            echo "üì± **Build**: Available in artifacts" >> $GITHUB_STEP_SUMMARY
          fi

  # ===============================================
  # üìä Deployment Summary
  # ===============================================
  deployment-summary:
    name: üìä Deployment Summary
    runs-on: ubuntu-latest
    needs: [pre-deployment, deploy-web, deploy-android, deploy-ios]
    if: always()

    steps:
      - name: üìä Create Deployment Summary
        run: |
          echo "üöÄ **Deployment Summary**" >> $GITHUB_STEP_SUMMARY
          echo "üåç **Environment**: ${{ needs.pre-deployment.outputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Web deployment status
          if [ "${{ needs.pre-deployment.outputs.deploy-web }}" = "true" ]; then
            if [ "${{ needs.deploy-web.result }}" = "success" ]; then
              echo "‚úÖ **Web**: Successfully deployed" >> $GITHUB_STEP_SUMMARY
            else
              echo "‚ùå **Web**: Deployment failed" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "‚è≠Ô∏è **Web**: Skipped" >> $GITHUB_STEP_SUMMARY
          fi

          # Android deployment status
          if [ "${{ needs.pre-deployment.outputs.deploy-android }}" = "true" ]; then
            if [ "${{ needs.deploy-android.result }}" = "success" ]; then
              echo "‚úÖ **Android**: Successfully deployed" >> $GITHUB_STEP_SUMMARY
            else
              echo "‚ùå **Android**: Deployment failed" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "‚è≠Ô∏è **Android**: Skipped" >> $GITHUB_STEP_SUMMARY
          fi

          # iOS deployment status
          if [ "${{ needs.pre-deployment.outputs.deploy-ios }}" = "true" ]; then
            if [ "${{ needs.deploy-ios.result }}" = "success" ]; then
              echo "‚úÖ **iOS**: Successfully deployed" >> $GITHUB_STEP_SUMMARY
            else
              echo "‚ùå **iOS**: Deployment failed" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "‚è≠Ô∏è **iOS**: Skipped" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "‚è∞ **Deployment completed at**: $(date)" >> $GITHUB_STEP_SUMMARY

  # ===============================================
  # üìß Deployment Notification
  # ===============================================
  notify-deployment:
    name: üìß Deployment Notification
    runs-on: ubuntu-latest
    needs: [pre-deployment, deployment-summary]
    if: always() && needs.pre-deployment.outputs.environment == 'production'

    steps:
      - name: üìß Send Deployment Notification
        run: |
          echo "üìß **Production Deployment Notification Sent**" >> $GITHUB_STEP_SUMMARY
          echo "Team members have been notified of the production deployment." >> $GITHUB_STEP_SUMMARY
          # Ici vous pouvez int√©grer Slack, Discord, Email, etc.
          # Exemple pour Slack:
          # curl -X POST -H 'Content-type: application/json' \
          #   --data '{"text":"üöÄ Koutonou deployed to production!"}' \
          #   ${{ secrets.SLACK_WEBHOOK_URL }}
