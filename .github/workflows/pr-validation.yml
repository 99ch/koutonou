name: ✅ Pull Request Validation

on:
  pull_request:
    branches: [main, production_ready, develop]
    types: [opened, synchronize, reopened, ready_for_review]

env:
  FLUTTER_VERSION: "3.24.0"

jobs:
  # ===============================================
  # 📋 PR Info & Validation
  # ===============================================
  pr-validation:
    name: 📋 PR Info & Basic Validation
    runs-on: ubuntu-latest
    timeout-minutes: 5
    if: github.event.pull_request.draft == false

    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 📋 PR Information
        run: |
          echo "📋 **Pull Request Information**" >> $GITHUB_STEP_SUMMARY
          echo "🔗 **PR #${{ github.event.number }}**: ${{ github.event.pull_request.title }}" >> $GITHUB_STEP_SUMMARY
          echo "👤 **Author**: @${{ github.event.pull_request.user.login }}" >> $GITHUB_STEP_SUMMARY
          echo "🌿 **Source**: ${{ github.event.pull_request.head.ref }}" >> $GITHUB_STEP_SUMMARY
          echo "🎯 **Target**: ${{ github.event.pull_request.base.ref }}" >> $GITHUB_STEP_SUMMARY
          echo "📊 **Changes**: +${{ github.event.pull_request.additions }} -${{ github.event.pull_request.deletions }}" >> $GITHUB_STEP_SUMMARY
          echo "📁 **Files**: ${{ github.event.pull_request.changed_files }}" >> $GITHUB_STEP_SUMMARY

      - name: 🔍 Check PR Title Format
        run: |
          TITLE="${{ github.event.pull_request.title }}"
          if [[ ! "$TITLE" =~ ^(feat|fix|docs|style|refactor|perf|test|chore|ci)(\(.+\))?: .+ ]]; then
            echo "❌ **PR Title Format Error**" >> $GITHUB_STEP_SUMMARY
            echo "Le titre de la PR doit suivre le format: \`type(scope): description\`" >> $GITHUB_STEP_SUMMARY
            echo "Exemples: \`feat(auth): add user login\`, \`fix(api): resolve API timeout\`" >> $GITHUB_STEP_SUMMARY
            exit 1
          else
            echo "✅ **PR Title Format**: Correct" >> $GITHUB_STEP_SUMMARY
          fi

  # ===============================================
  # 🚀 Quick Checks
  # ===============================================
  quick-checks:
    name: 🚀 Quick Checks
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: pr-validation

    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🐦 Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: "stable"
          cache: true

      - name: 📦 Get Dependencies
        run: flutter pub get

      - name: 🔍 Quick Analysis
        run: |
          echo "🔍 **Quick Analysis Results**" >> $GITHUB_STEP_SUMMARY

          # Formatting check
          if dart format --output=none --set-exit-if-changed lib/ test/ tools/; then
            echo "✅ **Formatting**: Correct" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Formatting**: Needs fix - run \`dart format .\`" >> $GITHUB_STEP_SUMMARY
          fi

          # Import analysis
          if flutter analyze --fatal-infos --fatal-warnings; then
            echo "✅ **Analysis**: No issues" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Analysis**: Issues found" >> $GITHUB_STEP_SUMMARY
          fi

      - name: 📊 Changed Files Analysis
        run: |
          echo "📁 **Files Changed in this PR**" >> $GITHUB_STEP_SUMMARY
          git diff --name-only ${{ github.event.pull_request.base.sha }}...${{ github.event.pull_request.head.sha }} | head -20 >> $GITHUB_STEP_SUMMARY

          DART_FILES=$(git diff --name-only ${{ github.event.pull_request.base.sha }}...${{ github.event.pull_request.head.sha }} | grep '\.dart$' | wc -l)
          echo "🐦 **Dart files changed**: $DART_FILES" >> $GITHUB_STEP_SUMMARY

  # ===============================================
  # 🧪 PR-Specific Tests
  # ===============================================
  pr-tests:
    name: 🧪 PR Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: quick-checks

    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🐦 Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: "stable"
          cache: true

      - name: 📦 Get Dependencies
        run: flutter pub get

      - name: 🧪 Run Tests with Coverage
        run: |
          flutter test --coverage --reporter json > test-results-pr.json

      - name: 📊 Test Coverage Analysis
        run: |
          if [ -f "coverage/lcov.info" ]; then
            echo "📊 **Test Coverage Report**" >> $GITHUB_STEP_SUMMARY
            
            # Installer lcov pour l'analyse
            sudo apt-get update && sudo apt-get install -y lcov
            
            # Générer le rapport de couverture
            COVERAGE=$(lcov --summary coverage/lcov.info 2>&1 | grep "lines" | grep -o '[0-9.]*%' | head -1)
            echo "📈 **Coverage**: $COVERAGE" >> $GITHUB_STEP_SUMMARY
            
            # Vérifier si la couverture est acceptable
            COVERAGE_NUM=$(echo $COVERAGE | sed 's/%//')
            if (( $(echo "$COVERAGE_NUM >= 70" | bc -l) )); then
              echo "✅ **Coverage Status**: Good ($COVERAGE)" >> $GITHUB_STEP_SUMMARY
            else
              echo "⚠️ **Coverage Status**: Low ($COVERAGE) - Consider adding more tests" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "ℹ️ **Coverage**: No coverage data available" >> $GITHUB_STEP_SUMMARY
          fi

  # ===============================================
  # 🏗️ Build Validation
  # ===============================================
  build-validation:
    name: 🏗️ Build Validation
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: pr-tests

    strategy:
      matrix:
        platform: [android, web]

    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: ☕ Setup Java (Android only)
        if: matrix.platform == 'android'
        uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: "17"

      - name: 🐦 Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: "stable"
          cache: true

      - name: 📦 Get Dependencies
        run: flutter pub get

      - name: 🏗️ Build for ${{ matrix.platform }}
        run: |
          if [ "${{ matrix.platform }}" = "android" ]; then
            flutter build apk --debug
            echo "✅ **Android Build**: Success" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ matrix.platform }}" = "web" ]; then
            flutter build web --debug
            echo "✅ **Web Build**: Success" >> $GITHUB_STEP_SUMMARY
          fi

  # ===============================================
  # 📝 PR Review Checklist
  # ===============================================
  review-checklist:
    name: 📝 Review Checklist
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: [pr-validation, quick-checks, pr-tests, build-validation]
    if: always()

    steps:
      - name: 📝 Generate Review Checklist
        run: |
          echo "📝 **Review Checklist for PR #${{ github.event.number }}**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## ✅ Automated Checks" >> $GITHUB_STEP_SUMMARY
          echo "- [x] PR title follows conventional commits format" >> $GITHUB_STEP_SUMMARY
          echo "- [x] Code formatting is correct" >> $GITHUB_STEP_SUMMARY
          echo "- [x] Flutter analysis passes" >> $GITHUB_STEP_SUMMARY
          echo "- [x] Tests are passing" >> $GITHUB_STEP_SUMMARY
          echo "- [x] Builds are successful" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 👀 Manual Review Required" >> $GITHUB_STEP_SUMMARY
          echo "- [ ] Code logic is sound and follows project patterns" >> $GITHUB_STEP_SUMMARY
          echo "- [ ] UI/UX changes are consistent with design system" >> $GITHUB_STEP_SUMMARY
          echo "- [ ] API changes are backward compatible" >> $GITHUB_STEP_SUMMARY
          echo "- [ ] Documentation is updated if needed" >> $GITHUB_STEP_SUMMARY
          echo "- [ ] Breaking changes are documented" >> $GITHUB_STEP_SUMMARY
          echo "- [ ] Security implications are considered" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 🚀 Ready to Merge When:" >> $GITHUB_STEP_SUMMARY
          echo "- [ ] All automated checks pass ✅" >> $GITHUB_STEP_SUMMARY
          echo "- [ ] At least one approval from code owner" >> $GITHUB_STEP_SUMMARY
          echo "- [ ] Manual review checklist completed" >> $GITHUB_STEP_SUMMARY
          echo "- [ ] Conflicts resolved (if any)" >> $GITHUB_STEP_SUMMARY

  # ===============================================
  # 🎯 Status Report
  # ===============================================
  pr-status-report:
    name: 🎯 PR Status Report
    runs-on: ubuntu-latest
    needs: [pr-validation, quick-checks, pr-tests, build-validation]
    if: always()

    steps:
      - name: 🎯 Final Status Report
        run: |
          echo "🎯 **PR Validation Summary**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Check results
          if [ "${{ needs.pr-validation.result }}" = "success" ]; then
            echo "✅ **PR Validation**: Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **PR Validation**: Failed" >> $GITHUB_STEP_SUMMARY
          fi

          if [ "${{ needs.quick-checks.result }}" = "success" ]; then
            echo "✅ **Quick Checks**: Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Quick Checks**: Failed" >> $GITHUB_STEP_SUMMARY
          fi

          if [ "${{ needs.pr-tests.result }}" = "success" ]; then
            echo "✅ **Tests**: Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Tests**: Failed" >> $GITHUB_STEP_SUMMARY
          fi

          if [ "${{ needs.build-validation.result }}" = "success" ]; then
            echo "✅ **Builds**: Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Builds**: Failed" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY

          # Overall status
          if [[ "${{ needs.pr-validation.result }}" = "success" && "${{ needs.quick-checks.result }}" = "success" && "${{ needs.pr-tests.result }}" = "success" && "${{ needs.build-validation.result }}" = "success" ]]; then
            echo "🎉 **Overall Status**: ✅ READY FOR REVIEW" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ **Overall Status**: ❌ NEEDS FIXES" >> $GITHUB_STEP_SUMMARY
          fi
